class Solution
{
    int [] rank;
    int parent[];
    //Function to detect cycle using DSU in an undirected graph.

  // find function

  
    public int find(int i){
        if(parent[i]== i){
            return i;
        }
        return parent[i]= find(parent[i]);
    }

  // find union 

  
    public void union (int x, int y){
        int x_parent = find(x);
        int y_parent = find(y);
        if(x_parent == y_parent){
            return;
        }
        if(rank[x_parent]>rank[y_parent]){
            parent[y_parent]= x_parent;
        }else if(rank[y_parent]>rank[x_parent]){
            parent[x_parent] = y_parent;
            
            
        }else{
            parent[x_parent]= parent[y_parent];
            rank[y_parent]++;
            
        }
    }
    public int detectCycle(int V, ArrayList<ArrayList<Integer>> adj)
    {
        // Code here
        parent= new int[V];
        rank = new int[V];
        for(int i=0;i<V;i++){
            parent[i]=i;
            rank[i]= 1;
        }
        for(int u=0; u<V;u++){
            for(int v: adj.get(u)){
                if(u<v){
                    int u_parent= find(u);
                    int v_parent = find(v);
                    if(u_parent==v_parent){
                        return 1; // cycle present
                    }
                    union(u,v);
                }
            }
        }
        return 0;
    }
}
